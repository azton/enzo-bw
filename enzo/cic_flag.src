#include "fortran.def"
c=======================================================================
c//////////////////////  SUBROUTINE CIC_FLAG  \\\\\\\\\\\\\\\\\\\\\\\
c
      subroutine cic_flag(posx, posy, posz, ndim, npositions, 
     &                    itype, ffield, leftedge, 
     &                    dim1, dim2, dim3, cellsize, imatch)
c
c  PERFORMS 1/2/3D CLOUD-IN-CELL MARKING OF FLAGGING FIELD
c
c  written by: Greg Bryan
c  date:       September, 2003
c  modified1:
c
c  PURPOSE: This routine performs a 1,2 or 3 dimension setting of a
c           flagging field for must-refine particles.

c
c  INPUTS:
c     ndim       - dimensionality
c     cellsize   - the cell size of field
c     dim1,2,3   - real dimensions of field
c     leftedge   - the left edge(s) of field
c     npositions - number of particles
c     posx,y,z   - particle positions
c     itype      - 1D field (length npositions) of types
c     imatch     - integer indicating type of particle to match
c
c  OUTPUT ARGUMENTS: 
c     ffield      - field to be deposited to
c
c  EXTERNALS: 
c
c  LOCALS:
c
c-----------------------------------------------------------------------
c
      implicit NONE
c
c-----------------------------------------------------------------------
c
c  argument declarations
c
      integer dim1, dim2, dim3, npositions, ndim, imatch
      REALSUB posx(npositions), posy(npositions), posz(npositions),
     &        leftedge(3)
      REALSUB cellsize
      integer itype(npositions), ffield(dim1, dim2, dim3)
c
c  locals
c
      integer i1, j1, k1, n
      real    xpos, ypos, zpos, fact
      REALSUB edge1, edge2, edge3, half
      parameter (half = 0.5001)
c
c\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\///////////////////////////////
c=======================================================================
c
      fact = 1.0/cellsize
      edge1 = real(dim1) - half
      edge2 = real(dim2) - half
      edge3 = real(dim3) - half
c
c     1D
c
      if (ndim .eq. 1) then
c
         do n=1, npositions
c
c           only do this for must-refine particles
c
            if (itype(n) .eq. imatch) then
c
c           Compute the position of the central cell
c
            xpos = min(max((posx(n) - leftedge(1))*fact, half), edge1)
c
c           Convert this into an integer index
c
            i1  = int(xpos + 0.5)
c
c           set flagging field
c
            ffield(i1  ,1,1) = ffield(i1  ,1,1) + 1
            ffield(i1+1,1,1) = ffield(i1+1,1,1) + 1
c
            endif
c
         enddo
c
      endif
c
c     2D
c
      if (ndim .eq. 2) then
c
         do n=1, npositions
c
c           only do this for must-refine particles
c
            if (itype(n) .eq. imatch) then
c
c           Compute the position of the central cell
c
            xpos = min(max((posx(n) - leftedge(1))*fact, half), edge1)
            ypos = min(max((posy(n) - leftedge(2))*fact, half), edge2)
c
c           Convert this into an integer index
c
            i1  = int(xpos + 0.5)
            j1  = int(ypos + 0.5)
c
c           Interpolate from field into sumfield
c
            ffield(i1  ,j1  ,1) = ffield(i1  ,j1  ,1) + 1
            ffield(i1+1,j1  ,1) = ffield(i1+1,j1  ,1) + 1
            ffield(i1  ,j1+1,1) = ffield(i1  ,j1+1,1) + 1
            ffield(i1+1,j1+1,1) = ffield(i1+1,j1+1,1) + 1
c
            endif
c
         enddo
c
      endif
c
c     3D
c
      if (ndim .eq. 3) then
c
         do n=1, npositions
c
c           only do this for must-refine particles
c
            if (itype(n) .eq. imatch) then
c
c           Compute the position of the central cell
c
            xpos = min(max((posx(n) - leftedge(1))*fact, half), edge1)
            ypos = min(max((posy(n) - leftedge(2))*fact, half), edge2)
            zpos = min(max((posz(n) - leftedge(3))*fact, half), edge3)
c
c           Convert this into an integer index
c
            i1  = int(xpos + 0.5)
            j1  = int(ypos + 0.5)
            k1  = int(zpos + 0.5)
c
c           Set flagging field
c     
            ffield(i1  ,j1  ,k1  ) = ffield(i1  ,j1  ,k1  ) + 1
            ffield(i1+1,j1  ,k1  ) = ffield(i1+1,j1  ,k1  ) + 1
            ffield(i1  ,j1+1,k1  ) = ffield(i1  ,j1+1,k1  ) + 1
            ffield(i1+1,j1+1,k1  ) = ffield(i1+1,j1+1,k1  ) + 1
            ffield(i1  ,j1  ,k1+1) = ffield(i1  ,j1  ,k1+1) + 1
            ffield(i1+1,j1  ,k1+1) = ffield(i1+1,j1  ,k1+1) + 1
            ffield(i1  ,j1+1,k1+1) = ffield(i1  ,j1+1,k1+1) + 1
            ffield(i1+1,j1+1,k1+1) = ffield(i1+1,j1+1,k1+1) + 1
c
            endif
c
         enddo
c
      endif
c
      return
      end
