!=======================================================================
!
! Copyright 2009 Daniel R. Reynolds
!
! This software is released under the terms of the "Enzo Public License"
! in the accompanying LICENSE file.
!
!=======================================================================


function FS_limiter(E1, E2, kap, lUn, dxi, LimType)
!=======================================================================
!  written by: Daniel R. Reynolds
!  date:       February 2013
!  modified:   
!
!  PURPOSE: Computes the flux limiter at a given face
!=======================================================================
  implicit none
  real*8, intent(in) :: E1, E2, kap, lUn, dxi
  integer, intent(in) :: LimType
  real*8 :: FS_limiter, Eavg, R, Emin, Rmin, Dmax, c

  ! speed of light [cm/s]
  c = 2.99792458d10
  
  ! set limiter bounds
  Rmin = 1.d-2/lUn
  Emin = 1.d-30
  Dmax = 10.d0 * c * lUn

  ! compute limiter
  Eavg = max((E1 + E2)*0.5d0, Emin)
  R = max(dxi*abs(E1 - E2)/Eavg, Rmin)
  if (LimType == 1) then       ! rational approx. to LP lim. (LP, 1981)
     FS_limiter = c*(2.d0*kap+R)/(6.d0*kap*kap+3.d0*kap*R+R*R)
  else if (LimType == 2) then  ! Larsen n=2 limiter
     FS_limiter = c/sqrt(9.d0*kap*kap + R*R)
  else if (LimType == 3) then  ! no limiter
     FS_limiter = c/3.d0/kap
  else if (LimType == 4) then  ! Zeus limiter
     FS_limiter = c*(2.d0*kap+R)/(6.d0*kap*kap+3.d0*kap*R+R*R)
  else                         ! standard LP lim (LP, 1981)
     FS_limiter = c*(cosh(R/kap)/sinh(R/kap)-kap/R)/R
  endif
  FS_limiter = min(FS_limiter, Dmax)

end function FS_limiter
!=======================================================================



subroutine FSProb_SetupSystem(matentries, rhsentries, rhsnorm, Ef, kappa, &
     eta, LimType, dt, a, a0, adot, adot0, theta, aUn, lUn, lUn0, rUn,    &
     rUn0, rank, dx, dy, dz, BCValsXl, BCValsXr, BCValsYl, BCValsYr,      &
     BCValsZl, BCValsZr, BCXl, BCXr, BCYl, BCYr, BCZl, BCZr, x0s, x0e,    &
     x1s, x1e, x2s, x2e, Nx, Ny, Nz, NGxl, NGxr, NGyl, NGyr, NGzl, NGzr,  &
     xlface, xrface, ylface, yrface, zlface, zrface, ier)
!=======================================================================
!  written by: Daniel R. Reynolds
!  date:       June 2009
!  modified:   
!
!  PURPOSE: Computes the array of matrix stencil elements and vector of 
!           rhs entries for the free-streaming radiation problem,
!              Div(Df(Ef)*Grad(Ef)) - adot/a*Ef + eta
!           where Df(Ef) is a free-streaming nonlinear flux-limiter 
!           depending on Ef (time lagged).  We define the values
!              R_i = |Grad(Ef)_i|/Ef,
!           The '_i' subscript implies the gradient in the ith 
!           direction; these quantities are all required at cell faces, 
!           as that is the location of the divergence calculations.
!           With these components, we allow any of the following three 
!           forms of the limiter, 
!             [Levermore-Pomraning, 1981],
!                 D_i(Ef) = c/kappa/R_i*[coth(R_i)-1/R_i],
!             [rational approx. to above, Levermore-Pomraning, 1981],
!                 D_i(Ef) = c/kappa*(2+R_i)/(6+3*R_i+R_i**2),
!             [Reynolds approximation to LP],
!                 D_i(Ef) = 2/pi*c*atan(R_i*pi/6/kappa)/R_i
!             [Zeus form of rational approx. to LP],
!                 D_i(Ef) = c*(2*kappa+R_i)/(6*kappa*kappa+3*kappa*R_i+R_i**2)
!           where we have the [small] parameter
!              kappa = absorption coefficient.
!           As the stencil has {7,5,3} non-zero elements per matrix row 
!           (depending on whether the problem is 3D, 2D or 1D), we 
!           set these entries over the computational domain, with the 
!           proper adjustments due to the choice of limiter.
!
!           We in fact solve a scaled version of the equation.  Since 
!           the values of Ef are in fact in normalized units 
!           (Ef_true = Ef*rUn), we must scale eta by rUn to achieve the
!           correct equation.  Moreover, we rescale every equation again 
!           by the diagonal value, giving the matrix a diagonal of ones, 
!           with off-diagonals and rhs scaled appropriately.
!
!  INPUTS:
!     Ef         - Free-streaming radiation energy density (prev time step)
!     kappa      - opacity (constant)
!     eta        - spatially-dependent emissivity source
!     LimType    - integer flag denoting type of flux limiter:
!                       0 -> standard Levermore-Pomraning lim. (LP, 1981)
!                       1 -> rational approx. to LP lim. (LP, 1981)
!                       2 -> Reynolds approx to LP lim.
!                       3 -> turns off the limiter (D = c/R)
!                       4 -> Zeus limiter
!     dt         - time step size
!     a,a0       - cosmological expansion factor (new and old time steps)
!     adot,adot0 - da/dt and da0/dt
!     theta      - overall implicitness parameter
!     *Un,*Un0   - variable scaling constants (new and old time steps)
!     rank       - 1, 2 or 3; the dimensionality of the problem
!     dx,dy,dz   - mesh spacing in each direction
!     BCVals*    - boundary condition value arrays for each face
!     BC*        - boundary condition type in each direction, face
!                     0->periodic
!                     1->Dirichlet
!                     2->Neumann
!     x*{s,e}    - start/end indices of linear solver domain; 
!                  typically 1:Nx for standard dims, but Dirichlet 
!                  BCs may move these to 0:Nx, 1:Nx+1, etc.
!     Nx,Ny,Nz   - active mesh size in each direction
!     NG*l/NG*r  - left/right ghost cells in each direction
!     *{l,r}face - integer flag denoting whether direction/face 
!                  is external to the domain (0->int, 1->ext)
!
!     Note: the vector inputs are of size (Nx + NGxl + NGxr) in 
!     the x-direction, others are similar.
!
!  OUTPUT ARGUMENTS: 
!     matentries - array of stencil values over the active domain.  
!                  Since the stencil has 7 nonzero entries, and as 
!                  this array should not include ghost cells, it 
!                  has dimensions (7,x0s:x0e,x1s:x1e,x2s:x2e).
!     rhsentries - array of rhs values over the active domain.  As 
!                  this array should not include ghost cells, it 
!                  has dimensions (x0s:x0e,x1s:x1e,x2s:x2e)
!     rhsnorm    - 2-norm of rhs array
!     ier        - success/failure flag (0->failure, 1->success)
!
!  EXTERNALS: 
!
!  LOCALS:
!
!=======================================================================
#include "fortran.def"
  implicit none
  
  !--------------
  ! argument declarations
  integer,  intent(in) :: LimType, rank
  integer,  intent(in) :: BCXl, BCXr, x0s, x0e, Nx, NGxl, NGxr, xlface, xrface
  integer,  intent(in) :: BCYl, BCYr, x1s, x1e, Ny, NGyl, NGyr, ylface, yrface
  integer,  intent(in) :: BCZl, BCZr, x2s, x2e, Nz, NGzl, NGzr, zlface, zrface
  REALSUB,  intent(in) :: a, a0, adot, adot0
  REALSUBR, intent(in) :: kappa, dt, theta, dx, dy, dz
  REALSUBR, intent(in) :: aUn, lUn, lUn0, rUn, rUn0
  REALSUBR, intent(in) :: Ef(*), eta(*)
  REALSUBR, intent(in) :: BCValsXl(*), BCValsXr(*)
  REALSUBR, intent(in) :: BCValsYl(*), BCValsYr(*)
  REALSUBR, intent(in) :: BCValsZl(*), BCValsZr(*)
  real*8,  intent(out) :: matentries(*)
  real*8,  intent(out) :: rhsentries(*)
  REALSUBR, intent(out) :: rhsnorm
  integer, intent(out) :: ier

  !=======================================================================
  

  ! call the apprpriate routine based on rank
  if (rank == 3) then

     call FSProb_SetupSystem3D(matentries, rhsentries, rhsnorm, Ef, kappa,  &
          eta, LimType, dt, a, a0, adot, adot0, theta, aUn, lUn, lUn0, rUn, &
          rUn0, dx, dy, dz, BCValsXl, BCValsXr, BCValsYl, BCValsYr,         &
          BCValsZl, BCValsZr, BCXl, BCXr, BCYl, BCYr, BCZl, BCZr, x0s, x0e, &
          x1s, x1e, x2s, x2e, Nx, Ny, Nz, NGxl, NGxr, NGyl, NGyr, NGzl,     &
          NGzr, xlface, xrface, ylface, yrface, zlface, zrface, ier)

  elseif (rank == 2) then

     call FSProb_SetupSystem2D(matentries, rhsentries, rhsnorm, Ef, kappa,  &
          eta, LimType, dt, a, a0, adot, adot0, theta, aUn, lUn, lUn0, rUn, &
          rUn0, dx, dy, BCValsXl, BCValsXr, BCValsYl, BCValsYr, BCXl, BCXr, &
          BCYl, BCYr, x0s, x0e, x1s, x1e, Nx, Ny, NGxl, NGxr, NGyl, NGyr,   &
          xlface, xrface, ylface, yrface, ier)

  elseif (rank == 1) then

     call FSProb_SetupSystem1D(matentries, rhsentries, rhsnorm, Ef, kappa,  &
          eta, LimType, dt, a, a0, adot, adot0, theta, aUn, lUn, lUn0, rUn, &
          rUn0, dx, BCValsXl, BCValsXr, BCXl, BCXr, x0s, x0e, Nx, NGxl,     &
          NGxr, xlface, xrface, ier)

  else
     write(0,*) 'FSProb_SetupSystem error: illegal rank =',rank
  end if

end subroutine FSProb_SetupSystem
!=======================================================================






subroutine FSProb_SetupSystem3D(matentries, rhsentries, rhsnorm, Ef,     &
     kappa, eta, LimType, dt, a, a0, adot, adot0, theta, aUn, lUn, lUn0, &
     rUn, rUn0, dx, dy, dz, BCValsXl, BCValsXr, BCValsYl, BCValsYr,      &
     BCValsZl, BCValsZr, BCXl, BCXr, BCYl, BCYr, BCZl, BCZr, x0s, x0e,   &
     x1s, x1e, x2s, x2e, Nx, Ny, Nz, NGxl, NGxr, NGyl, NGyr, NGzl, NGzr, &
     xlface, xrface, ylface, yrface, zlface, zrface, ier)
!=======================================================================
!  written by: Daniel R. Reynolds
!  date:       June 2009
!  modified:   
!
!  PURPOSE: 3D version of the routine
!=======================================================================
#include "fortran.def"
  implicit none
  
  !--------------
  ! argument declarations
  integer,  intent(in) :: LimType
  integer,  intent(in) :: BCXl, BCXr, x0s, x0e, Nx, NGxl, NGxr, xlface, xrface
  integer,  intent(in) :: BCYl, BCYr, x1s, x1e, Ny, NGyl, NGyr, ylface, yrface
  integer,  intent(in) :: BCZl, BCZr, x2s, x2e, Nz, NGzl, NGzr, zlface, zrface
  REALSUB,  intent(in) :: a, a0, adot, adot0
  REALSUBR, intent(in) :: kappa, dt, theta, dx, dy, dz
  REALSUBR, intent(in) :: aUn, lUn, lUn0, rUn, rUn0
  REALSUBR, dimension(1-NGxl:Nx+NGxr,1-NGyl:Ny+NGyr,1-NGzl:Nz+NGzr), &
       intent(in) :: Ef, eta
  REALSUBR, intent(in) :: BCValsXl(Ny,Nz), BCValsXr(Ny,Nz)
  REALSUBR, intent(in) :: BCValsYl(Nx,Nz), BCValsYr(Nx,Nz)
  REALSUBR, intent(in) :: BCValsZl(Nx,Ny), BCValsZr(Nx,Ny)
  real*8,  intent(out) :: matentries(7,x0s:x0e,x1s:x1e,x2s:x2e)
  real*8,  intent(out) :: rhsentries(x0s:x0e,x1s:x1e,x2s:x2e)
  REALSUBR, intent(out) :: rhsnorm
  integer, intent(out) :: ier

  !--------------
  ! locals
  integer :: i, j, k
  real*8  :: dtfac, dtfac0, dxfac, dyfac, dzfac, dxfac0, dyfac0, dzfac0
  real*8  :: c, pi, dxi, dxi0, dyi, dyi0, dzi, dzi0, R, afac, afac0
  real*8  :: D_xl, D0_xl, D_xr, D0_xr, E0d_xl, E0d_xr
  real*8  :: D_yl, D0_yl, D_yr, D0_yr, E0d_yl, E0d_yr
  real*8  :: D_zl, D0_zl, D_zr, D0_zr, E0d_zl, E0d_zr
  real*8  :: dscale
  real*8, external :: FS_limiter

!=======================================================================
  
  ! initialize outputs to zero, flag to success
  matentries = 0.d0
  rhsentries = 0.d0
  ier = 1

  ! set shortcut values
  dtfac  = dt*theta         ! time step conversion factor
  dtfac0 = dt*(1.d0-theta)  ! time step conversion factor
  afac  = adot/a            ! expansion factor (new time)
  afac0 = adot0/a0          ! expansion factor (old time)
  dxi   = 1.d0/dx/lUn
  dyi   = 1.d0/dy/lUn
  dzi   = 1.d0/dz/lUn
  dxi0  = 1.d0/dx/lUn0
  dyi0  = 1.d0/dy/lUn0
  dzi0  = 1.d0/dz/lUn0
  dxfac = dtfac*dxi*dxi
  dyfac = dtfac*dyi*dyi
  dzfac = dtfac*dzi*dzi
  dxfac0 = dtfac0*dxi0*dxi0
  dyfac0 = dtfac0*dyi0*dyi0
  dzfac0 = dtfac0*dzi0*dzi0
  c  = 2.99792458d10        ! speed of light [cm/s]
  pi = 4.d0*atan(1.d0)

  ! iterate over the active domain
  do k=1,Nz,1
     do j=1,Ny,1
        do i=1,Nx,1

           !--------------
           ! z-directional limiter, lower face
           E0d_zl = (Ef(i,j,k) - Ef(i,j,k-1))
           D_zl = FS_limiter(Ef(i,j,k), Ef(i,j,k-1), kappa, lUn, dzi, LimType)
           D0_zl = FS_limiter(Ef(i,j,k), Ef(i,j,k-1), kappa, lUn0, dzi0, LimType)

           !--------------
           ! y-directional limiter, lower face
           !    compute gradients of old Ef
           E0d_yl = (Ef(i,j,k) - Ef(i,j-1,k))
           D_yl = FS_limiter(Ef(i,j,k), Ef(i,j-1,k), kappa, lUn, dyi, LimType)
           D0_yl = FS_limiter(Ef(i,j,k), Ef(i,j-1,k), kappa, lUn0, dyi0, LimType)

           !--------------
           ! x-directional limiter, lower face
           !    compute gradients of old Ef
           E0d_xl = (Ef(i,j,k) - Ef(i-1,j,k))
           D_xl = FS_limiter(Ef(i,j,k), Ef(i-1,j,k), kappa, lUn, dxi, LimType)
           D0_xl = FS_limiter(Ef(i,j,k), Ef(i-1,j,k), kappa, lUn0, dxi0, LimType)

           !--------------
           ! x-directional limiter, upper face
           !    compute gradients of old Ef
           E0d_xr = (Ef(i+1,j,k) - Ef(i,j,k))
           D_xr = FS_limiter(Ef(i,j,k), Ef(i+1,j,k), kappa, lUn, dxi, LimType)
           D0_xr = FS_limiter(Ef(i,j,k), Ef(i+1,j,k), kappa, lUn0, dxi0, LimType)

           !--------------
           ! y-directional limiter, upper face
           !    compute gradients of old Ef
           E0d_yr = (Ef(i,j+1,k) - Ef(i,j,k))
           D_yr = FS_limiter(Ef(i,j,k), Ef(i,j+1,k), kappa, lUn, dyi, LimType)
           D0_yr = FS_limiter(Ef(i,j,k), Ef(i,j+1,k), kappa, lUn0, dyi0, LimType)

           !--------------
           ! z-directional limiter, upper face
           !    compute gradients of old Ef
           E0d_zr = (Ef(i,j,k+1) - Ef(i,j,k))
           D_zr = FS_limiter(Ef(i,j,k), Ef(i,j,k+1), kappa, lUn, dzi, LimType)
           D0_zr = FS_limiter(Ef(i,j,k), Ef(i,j,k+1), kappa, lUn0, dzi0, LimType)

           ! set the diagonal value
           ! (use this to rescale equation to have 1 on diagonal)
           dscale = 1.d0 + dtfac*afac + dxfac*(D_xl+D_xr)  &
                  + dyfac*(D_yl+D_yr) + dzfac*(D_zl+D_zr)

           ! set the matrix entries.  Note: the diffusive component 
           ! need not be rescaled, since scaling and chain rule cancel 
           matentries(:,i,j,k) = (/  &
                -dzfac*D_zl, &         ! z-left
                -dyfac*D_yl, &         ! y-left
                -dxfac*D_xl, &         ! x-left
                 dscale,     &         ! self
                -dxfac*D_xr, &         ! x-right
                -dyfac*D_yr, &         ! y-right
                -dzfac*D_zr /)/dscale  ! z-right

           ! set the rhs entries
           rhsentries(i,j,k) = ((1.d0 - dtfac0*afac0)*Ef(i,j,k) &
                + dt*eta(i,j,k)/rUn                             &
                + dxfac0*(D0_xr*E0d_xr-D0_xl*E0d_xl)            &
                + dyfac0*(D0_yr*E0d_yr-D0_yl*E0d_yl)            &
                + dzfac0*(D0_zr*E0d_zr-D0_zr*E0d_zl))/dscale

        enddo
     enddo
  enddo

  ! update matrix/rhs based on boundary conditions/location
  !    z-left face
  if (zlface == 1) then
     ! Dirichlet
     if (BCZl==1) then
        k = 0
        do j=1,Ny
           do i=1,Nx
              matentries(:,i,j,k) = 0.d0
              matentries(4,i,j,k) = 1.d0
              rhsentries(i,j,k)   = BCvalsZl(i,j)/rUn
           enddo
        enddo
     ! Neumann
     else if (BCZl==2) then
        k = 1
        do j=1,Ny
           do i=1,Nx
              R = matentries(1,i,j,k)
              matentries(1,i,j,k) = 0.d0
              matentries(4,i,j,k) = matentries(4,i,j,k) + R
              rhsentries(i,j,k)   = rhsentries(i,j,k) - R*BCvalsZl(i,j)/rUn/dzi
           enddo
        enddo
     endif
  end if

  !    y-left face
  if (ylface == 1) then
     ! Dirichlet
     if (BCYl==1) then
        j = 0
        do k=1,Nz
           do i=1,Nx
              matentries(:,i,j,k) = 0.d0
              matentries(4,i,j,k) = 1.d0
              rhsentries(i,j,k)   = BCvalsYl(i,k)/rUn
           enddo
        enddo
     ! Neumann
     else if (BCYl==2) then
        j = 1
        do k=1,Nz
           do i=1,Nx
              R = matentries(2,i,j,k)
              matentries(2,i,j,k) = 0.d0
              matentries(4,i,j,k) = matentries(4,i,j,k) + R
              rhsentries(i,j,k)   = rhsentries(i,j,k) - R*BCvalsYl(i,k)/rUn/dyi
           enddo
        enddo
     endif
  end if

  !    x-left face
  if (xlface == 1) then
     ! Dirichlet
     if (BCXl==1) then
        i = 0
        do k=1,Nz
           do j=1,Ny
              matentries(:,i,j,k) = 0.d0
              matentries(4,i,j,k) = 1.d0
              rhsentries(i,j,k)   = BCvalsXl(j,k)/rUn
           enddo
        enddo
     ! Neumann
     else if (BCXl==2) then
        i = 1
        do k=1,Nz
           do j=1,Ny
              R = matentries(3,i,j,k)
              matentries(3,i,j,k) = 0.d0
              matentries(4,i,j,k) = matentries(4,i,j,k) + R
              rhsentries(i,j,k)   = rhsentries(i,j,k) - R*BCvalsXl(j,k)/rUn/dxi
           enddo
        enddo
     endif
  end if

  !    x-right face
  if (xrface==1) then
     ! Dirichlet
     if (BCXr==1) then
        i = Nx+1
        do k=1,Nz
           do j=1,Ny
              matentries(:,i,j,k) = 0.d0
              matentries(4,i,j,k) = 1.d0
              rhsentries(i,j,k)   = BCvalsXr(j,k)/rUn
           enddo
        enddo
     ! Neumann
     else if (BCXr==2) then
        i = Nx
        do k=1,Nz
           do j=1,Ny
              R = matentries(5,i,j,k)
              matentries(4,i,j,k) = matentries(4,i,j,k) + R
              matentries(5,i,j,k) = 0.d0
              rhsentries(i,j,k)   = rhsentries(i,j,k) - R*BCvalsXr(j,k)/rUn/dxi
           enddo
        enddo
     endif
  endif

  !    y-right face
  if (yrface==1) then
     ! Dirichlet
     if (BCYr==1) then
        j = Ny+1
        do k=1,Nz
           do i=1,Nx
              matentries(:,i,j,k) = 0.d0
              matentries(4,i,j,k) = 1.d0
              rhsentries(i,j,k)   = BCvalsYr(i,k)/rUn
           enddo
        enddo
     ! Neumann
     else if (BCYr==2) then
        j = Ny
        do k=1,Nz
           do i=1,Nx
              R = matentries(6,i,j,k)
              matentries(4,i,j,k) = matentries(4,i,j,k) + R
              matentries(6,i,j,k) = 0.d0
              rhsentries(i,j,k)   = rhsentries(i,j,k) - R*BCvalsYr(i,k)/rUn/dyi
           enddo
        enddo
     endif
  endif

  !    z-right face
  if (zrface==1) then
     ! Dirichlet
     if (BCZr==1) then
        k = Nz+1
        do j=1,Ny
           do i=1,Nx
              matentries(:,i,j,k) = 0.d0
              matentries(4,i,j,k) = 1.d0
              rhsentries(i,j,k)   = BCvalsZr(i,j)/rUn
           enddo
        enddo
     ! Neumann
     else if (BCZr==2) then
        k = Nz
        do j=1,Ny
           do i=1,Nx
              R = matentries(7,i,j,k)
              matentries(4,i,j,k) = matentries(4,i,j,k) + R
              matentries(7,i,j,k) = 0.d0
              rhsentries(i,j,k)   = rhsentries(i,j,k) - R*BCvalsZr(i,j)/rUn/dzi
           enddo
        enddo
     endif
  endif

  rhsnorm = sum(rhsentries*rhsentries)

  return
end subroutine FSProb_SetupSystem3D
!=======================================================================






subroutine FSProb_SetupSystem2D(matentries, rhsentries, rhsnorm, Ef,     &
     kappa, eta, LimType, dt, a, a0, adot, adot0, theta, aUn, lUn, lUn0, &
     rUn, rUn0, dx, dy, BCValsXl, BCValsXr, BCValsYl, BCValsYr, BCXl,    &
     BCXr, BCYl, BCYr, x0s, x0e, x1s, x1e, Nx, Ny, NGxl, NGxr, NGyl,     &
     NGyr, xlface, xrface, ylface, yrface, ier)
!=======================================================================
!  written by: Daniel R. Reynolds
!  date:       June 2009
!  modified:   
!
!  PURPOSE: 2D version of the routine
!=======================================================================
#include "fortran.def"
  implicit none
  
  !--------------
  ! argument declarations
  integer,  intent(in) :: LimType
  integer,  intent(in) :: BCXl, BCXr, x0s, x0e, Nx, NGxl, NGxr, xlface, xrface
  integer,  intent(in) :: BCYl, BCYr, x1s, x1e, Ny, NGyl, NGyr, ylface, yrface
  REALSUB,  intent(in) :: a, a0, adot, adot0
  REALSUBR, intent(in) :: kappa, dt, theta, dx, dy
  REALSUBR, intent(in) :: aUn, lUn, lUn0, rUn, rUn0
  REALSUBR, intent(in), dimension(1-NGxl:Nx+NGxr,1-NGyl:Ny+NGyr) :: Ef, eta
  REALSUBR, intent(in) :: BCValsXl(Ny), BCValsXr(Ny)
  REALSUBR, intent(in) :: BCValsYl(Nx), BCValsYr(Nx)
  real*8,  intent(out) :: matentries(5,x0s:x0e,x1s:x1e)
  real*8,  intent(out) :: rhsentries(x0s:x0e,x1s:x1e)
  REALSUBR, intent(out) :: rhsnorm
  integer, intent(out) :: ier

  !--------------
  ! locals
  integer :: i, j
  real*8  :: dtfac, dtfac0, dxfac, dyfac, dxfac0, dyfac0
  real*8  :: c, pi, dxi, dxi0, dyi, dyi0, R, afac, afac0
  real*8  :: D_xl, D0_xl, D_xr, D0_xr, E0d_xl, E0d_xr
  real*8  :: D_yl, D0_yl, D_yr, D0_yr, E0d_yl, E0d_yr
  real*8  :: dscale
  real*8, external :: FS_limiter

!=======================================================================
  
  ! initialize outputs to zero, flag to success
  matentries = 0.d0
  rhsentries = 0.d0
  ier = 1

  ! set shortcut values
  dtfac  = dt*theta         ! time step conversion factor
  dtfac0 = dt*(1.d0-theta)  ! time step conversion factor
  afac  = adot/a            ! expansion factor (new time)
  afac0 = adot0/a0          ! expansion factor (old time)
  dxi   = 1.d0/dx/lUn
  dyi   = 1.d0/dy/lUn
  dxi0  = 1.d0/dx/lUn0
  dyi0  = 1.d0/dy/lUn0
  dxfac = dtfac*dxi*dxi
  dyfac = dtfac*dyi*dyi
  dxfac0 = dtfac0*dxi0*dxi0
  dyfac0 = dtfac0*dyi0*dyi0
  c  = 2.99792458d10        ! speed of light [cm/s]
  pi = 4.d0*atan(1.d0)

  ! iterate over the active domain
  do j=1,Ny,1
     do i=1,Nx,1

        !--------------
        ! y-directional limiter, lower face
        !    compute gradients of old Ef
        E0d_yl = (Ef(i,j) - Ef(i,j-1))
        D_yl = FS_limiter(Ef(i,j), Ef(i,j-1), kappa, lUn, dyi, LimType)
        D0_yl = FS_limiter(Ef(i,j), Ef(i,j-1), kappa, lUn0, dyi0, LimType)

        !--------------
        ! x-directional limiter, lower face
        !    compute gradients of old Ef
        E0d_xl = (Ef(i,j) - Ef(i-1,j))
        D_xl = FS_limiter(Ef(i,j), Ef(i-1,j), kappa, lUn, dxi, LimType)
        D0_xl = FS_limiter(Ef(i,j), Ef(i-1,j), kappa, lUn0, dxi0, LimType)

        !--------------
        ! x-directional limiter, upper face
        !    compute gradients of old Ef
        E0d_xr = (Ef(i+1,j) - Ef(i,j))
        D_xr = FS_limiter(Ef(i,j), Ef(i+1,j), kappa, lUn, dxi, LimType)
        D0_xr = FS_limiter(Ef(i,j), Ef(i+1,j), kappa, lUn0, dxi0, LimType)

        !--------------
        ! y-directional limiter, upper face
        !    compute gradients of old Ef
        E0d_yr = (Ef(i,j+1) - Ef(i,j))
        D_yr = FS_limiter(Ef(i,j), Ef(i,j+1), kappa, lUn, dyi, LimType)
        D0_yr = FS_limiter(Ef(i,j), Ef(i,j+1), kappa, lUn0, dyi0, LimType)

        ! set the diagonal value
        ! (use this to rescale equation to have 1 on diagonal)
        dscale = 1.d0 + dtfac*afac + dxfac*(D_xl+D_xr) + dyfac*(D_yl+D_yr)

        ! set the matrix entries.  Note: the diffusive component 
        ! need not be rescaled, since scaling and chain rule cancel 
        matentries(:,i,j) = (/    &
             -dyfac*D_yl, &         ! y-left
             -dxfac*D_xl, &         ! x-left
              dscale,     &         ! self
             -dxfac*D_xr, &         ! x-right
             -dyfac*D_yr /)/dscale  ! y-right

        ! set the rhs entries
        rhsentries(i,j) = ((1.d0 - dtfac0*afac0)*Ef(i,j)     &
             + dt*eta(i,j)/rUn                               &
             + dxfac0*(D0_xr*E0d_xr-D0_xl*E0d_xl)  &
             + dyfac0*(D0_yr*E0d_yr-D0_yl*E0d_yl))/dscale

     enddo
  enddo
  
  ! update matrix/rhs based on boundary conditions/location
  !    y-left face
  if (ylface == 1) then
     ! Dirichlet
     if (BCYl==1) then
        j = 0
        do i=1,Nx
           matentries(:,i,j) = 0.d0
           matentries(3,i,j) = 1.d0
           rhsentries(i,j)   = BCvalsYl(i)/rUn
        enddo
        ! Neumann
     else if (BCYl==2) then
        j = 1
        do i=1,Nx
           R = matentries(1,i,j)
           matentries(1,i,j) = 0.d0
           matentries(3,i,j) = matentries(3,i,j) + R
           rhsentries(i,j)   = rhsentries(i,j) - R*BCvalsYl(i)/rUn/dyi
        enddo
     endif
  end if

  !    x-left face
  if (xlface == 1) then
     ! Dirichlet
     if (BCXl==1) then
        i = 0
        do j=1,Ny
           matentries(:,i,j) = 0.d0
           matentries(3,i,j) = 1.d0
           rhsentries(i,j)   = BCvalsXl(j)/rUn
        enddo
        ! Neumann
     else if (BCXl==2) then
        i = 1
        do j=1,Ny
           R = matentries(2,i,j)
           matentries(2,i,j) = 0.d0
           matentries(3,i,j) = matentries(3,i,j) + R
           rhsentries(i,j)   = rhsentries(i,j) - R*BCvalsXl(j)/rUn/dxi
        enddo
     endif
  end if

  !    x-right face
  if (xrface==1) then
     ! Dirichlet
     if (BCXr==1) then
        i = Nx+1
        do j=1,Ny
           matentries(:,i,j) = 0.d0
           matentries(3,i,j) = 1.d0
           rhsentries(i,j)   = BCvalsXr(j)/rUn
        enddo
        ! Neumann
     else if (BCXr==2) then
        i = Nx
        do j=1,Ny
           R = matentries(4,i,j)
           matentries(4,i,j) = 0.d0
           matentries(3,i,j) = matentries(3,i,j) + R
           rhsentries(i,j)   = rhsentries(i,j) - R*BCvalsXr(j)/rUn/dxi
        enddo
     endif
  endif

  !    y-right face
  if (yrface==1) then
     ! Dirichlet
     if (BCYr==1) then
        j = Ny+1
        do i=1,Nx
           matentries(:,i,j) = 0.d0
           matentries(3,i,j) = 1.d0
           rhsentries(i,j)   = BCvalsYr(i)/rUn
        enddo
        ! Neumann
     else if (BCYr==2) then
        j = Ny
        do i=1,Nx
           R = matentries(5,i,j)
           matentries(5,i,j) = 0.d0
           matentries(3,i,j) = matentries(3,i,j) + R
           rhsentries(i,j)   = rhsentries(i,j) - R*BCvalsYr(i)/rUn/dyi
        enddo
     endif
  endif

  rhsnorm = sum(rhsentries*rhsentries)

  return
end subroutine FSProb_SetupSystem2D
!=======================================================================






subroutine FSProb_SetupSystem1D(matentries, rhsentries, rhsnorm, Ef,     &
     kappa, eta, LimType, dt, a, a0, adot, adot0, theta, aUn, lUn, lUn0, &
     rUn, rUn0, dx, BCValsXl, BCValsXr, BCXl, BCXr, x0s, x0e, Nx, NGxl,  &
     NGxr, xlface, xrface, ier)
!=======================================================================
!  written by: Daniel R. Reynolds
!  date:       June 2009
!  modified:   
!
!  PURPOSE: 1D version of the routine
!=======================================================================
#include "fortran.def"
  implicit none
  
  !--------------
  ! argument declarations
  integer,  intent(in) :: LimType
  integer,  intent(in) :: BCXl, BCXr, x0s, x0e, Nx, NGxl, NGxr, xlface, xrface
  REALSUB,  intent(in) :: a, a0, adot, adot0
  REALSUBR, intent(in) :: kappa, dt, theta, dx
  REALSUBR, intent(in) :: aUn, lUn, lUn0, rUn, rUn0
  REALSUBR, intent(in), dimension(1-NGxl:Nx+NGxr) :: Ef, eta
  REALSUBR, intent(in) :: BCValsXl(1), BCValsXr(1)
  real*8,  intent(out) :: matentries(3,x0s:x0e)
  real*8,  intent(out) :: rhsentries(x0s:x0e)
  REALSUBR, intent(out) :: rhsnorm
  integer, intent(out) :: ier

  !--------------
  ! locals
  integer :: i
  real*8  :: dtfac, dtfac0, dxfac, dxfac0
  real*8  :: c, pi, dxi, dxi0, R, afac, afac0
  real*8  :: D_xl, D0_xl, D_xr, D0_xr, E0d_xl, E0d_xr
  real*8  :: dscale
  real*8, external :: FS_limiter

!=======================================================================
  
  ! initialize outputs to zero, flag to success
  matentries = 0.d0
  rhsentries = 0.d0
  ier = 1

  ! set shortcut values
  dtfac  = dt*theta         ! time step conversion factor
  dtfac0 = dt*(1.d0-theta)  ! time step conversion factor
  afac  = adot/a            ! expansion factor (new time)
  afac0 = adot0/a0          ! expansion factor (old time)
  dxi   = 1.d0/dx/lUn
  dxi0  = 1.d0/dx/lUn0
  dxfac = dtfac*dxi*dxi
  dxfac0 = dtfac0*dxi0*dxi0
  c  = 2.99792458d10        ! speed of light [cm/s]
  pi = 4.d0*atan(1.d0)

  ! iterate over the active domain
  do i=1,Nx,1

     !--------------
     ! x-directional limiter, lower face
     !    compute gradients of old Ef
     E0d_xl = (Ef(i) - Ef(i-1))
     D_xl = FS_limiter(Ef(i), Ef(i-1), kappa, lUn, dxi, LimType)
     D0_xl = FS_limiter(Ef(i), Ef(i-1), kappa, lUn0, dxi0, LimType)

     !--------------
     ! x-directional limiter, upper face
     !    compute gradients of old Ef
     E0d_xr = (Ef(i+1) - Ef(i))
     D_xr = FS_limiter(Ef(i), Ef(i+1), kappa, lUn, dxi, LimType)
     D0_xr = FS_limiter(Ef(i), Ef(i+1), kappa, lUn0, dxi0, LimType)

     ! set the diagonal value
     ! (use this to rescale equation to have 1 on diagonal)
     dscale = 1.d0 + dtfac*afac + dxfac*(D_xl+D_xr)

     ! set the matrix entries.  Note: the diffusive component 
     ! need not be rescaled, since scaling and chain rule cancel 
     matentries(:,i) = (/      &
          -dxfac*D_xl, &          ! x-left
           dscale,     &          ! self
          -dxfac*D_xr /)/dscale   ! x-right

     ! set the rhs entries
     rhsentries(i) = ((1.d0 - dtfac0*afac0)*Ef(i) + dt*eta(i)/rUn &
          + dxfac0*(D0_xr*E0d_xr-D0_xl*E0d_xl))/dscale

  enddo

  ! update matrix/rhs based on boundary conditions/location
  !    x-left face
  if (xlface == 1) then
     ! Dirichlet
     if (BCXl==1) then
        i = 0
        matentries(:,i) = 0.d0
        matentries(2,i) = 1.d0
        rhsentries(i)   = BCvalsXl(1)/rUn
        ! Neumann
     else if (BCXl==2) then
        i = 1
        R = matentries(1,i)
        matentries(1,i) = 0.d0
        matentries(2,i) = matentries(2,i) + R
        rhsentries(i)   = rhsentries(i) - R*BCvalsXl(1)/rUn/dxi
     endif
  end if

  !    x-right face
  if (xrface==1) then
     ! Dirichlet
     if (BCXr==1) then
        i = Nx+1
        matentries(:,i) = 0.d0
        matentries(2,i) = 1.d0
        rhsentries(i)   = BCvalsXr(1)/rUn
        ! Neumann
     else if (BCXr==2) then
        i = Nx
        R = matentries(3,i)
        matentries(3,i) = 0.d0
        matentries(2,i) = matentries(2,i) + R
        rhsentries(i)   = rhsentries(i) - R*BCvalsXr(1)/rUn/dxi
     endif
  endif

  rhsnorm = sum(rhsentries*rhsentries)

  return
end subroutine FSProb_SetupSystem1D
!=======================================================================
